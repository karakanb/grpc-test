// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plansservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlansServiceClient is the client API for PlansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlansServiceClient interface {
	CreatePlan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanCreated, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*Plan, error)
}

type plansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlansServiceClient(cc grpc.ClientConnInterface) PlansServiceClient {
	return &plansServiceClient{cc}
}

func (c *plansServiceClient) CreatePlan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanCreated, error) {
	out := new(PlanCreated)
	err := c.cc.Invoke(ctx, "/plansservice.PlansService/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plansServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*Plan, error) {
	out := new(Plan)
	err := c.cc.Invoke(ctx, "/plansservice.PlansService/GetPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlansServiceServer is the server API for PlansService service.
// All implementations must embed UnimplementedPlansServiceServer
// for forward compatibility
type PlansServiceServer interface {
	CreatePlan(context.Context, *PlanRequest) (*PlanCreated, error)
	GetPlan(context.Context, *GetPlanRequest) (*Plan, error)
	mustEmbedUnimplementedPlansServiceServer()
}

// UnimplementedPlansServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlansServiceServer struct {
}

func (UnimplementedPlansServiceServer) CreatePlan(context.Context, *PlanRequest) (*PlanCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedPlansServiceServer) GetPlan(context.Context, *GetPlanRequest) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlansServiceServer) mustEmbedUnimplementedPlansServiceServer() {}

// UnsafePlansServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlansServiceServer will
// result in compilation errors.
type UnsafePlansServiceServer interface {
	mustEmbedUnimplementedPlansServiceServer()
}

func RegisterPlansServiceServer(s grpc.ServiceRegistrar, srv PlansServiceServer) {
	s.RegisterService(&PlansService_ServiceDesc, srv)
}

func _PlansService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlansServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plansservice.PlansService/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlansServiceServer).CreatePlan(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlansService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlansServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plansservice.PlansService/GetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlansServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlansService_ServiceDesc is the grpc.ServiceDesc for PlansService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlansService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plansservice.PlansService",
	HandlerType: (*PlansServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _PlansService_CreatePlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _PlansService_GetPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plans_service.proto",
}
